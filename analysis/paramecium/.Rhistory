library(paramecium)
?plot
?plot_shock_data
system.file('data/out_15000_mV_rep03.csv', package='paramecium')
filename<-system.file('data/out_15000_mV_rep03.csv', package='paramecium')
dat<-read.table(filename, sep=',', header=TRUE)
vec<-lapply(unique(dat$ID), function(x){sqrt(diff(dat$X[dat$ID==x])^2+diff(dat$Y[dat$ID==x])^2)  })
vec<-do.call("rbind", vec)
logfile<-system.file('data/log_15000_mV_rep03.log', package='paramecium')
log<-read.table(logfile, skip=1, header=TRUE, fill=TRUE, row.names = NULL)
log()
log
logfile
logfile<-system.file('data/log_15000_mV_rep03.txt', package='paramecium')
logfile<-system.file('data/log_15000_mV_rep03.txt', package='paramecium')
log<-read.table(logfile, skip=1, header=TRUE, fill=TRUE, row.names = NULL)
log
logfile
logfile<-system.file('data/log_15000_mV_rep03.txt', package='paramecium')
logfile
library(paramecium)
filename<-system.file('data/out_15000_mV_rep03.csv', package='paramecium')
dat<-read.table(filename, sep=',', header=TRUE)
vec<-lapply(unique(dat$ID), function(x){sqrt(diff(dat$X[dat$ID==x])^2+diff(dat$Y[dat$ID==x])^2)  })
vec<-do.call("rbind", vec)
logfile<-system.file('data/log_15000_mV_rep03.txt', package='paramecium')
log<-read.table(logfile, skip=1, header=TRUE, fill=TRUE, row.names = NULL)
log
names(log)<-c('Frame', 'Time', 'Stimuli', 'Event', 'Trial')
log
log<-read.table(logfile, skip=1, header=TRUE, fill=TRUE, row.names = NULL)
names(log)<-c('Frame', 'Time', 'Stimuli', 'Event', 'Trial')
head(log)
fps<-30  # Replace with actual frames per second
shock_on_times<-log$Frame[which(log$Stimuli=='US' & log$Event=='on')]/fps
shock_off_times<-log$Frame[which(log$Stimuli=='US' & log$Event=='off')]/fps
out<-plot_shock_data(vec, fps, shock_on_times, shock_off_times)
library(paramecium)
out<-plot_shock_data(vec, fps, shock_on_times, shock_off_times)
out$perc.red
test<-read.table('~/Desktop/exp.csv', sep=',', header=TRUE)
test<-read.table('~/Desktop/exp3.csv', sep=',', header=TRUE)
head(test)
test<-read.table('~/Desktop/exp3.csv', sep=';', header=TRUE)
test<-read.table('~/Desktop/exp3.csv', sep=';', header=TRUE, fill=TRUE)
test<-read.table('~/Desktop/exp3.csv', sep=';', header=TRUE, fill=TRUE)
test<-read.table('~/Desktop/exp3.csv', sep=';', header=TRUE)
test<-read.table('~/Desktop/exp3.txt', sep='\t', header=TRUE)
test<-read.table('~/Desktop/exp3.txt', sep=';', header=TRUE)
test<-read.table('~/Desktop/exp3.txt', sep=',', header=TRUE)
test<-read.table('~/Desktop/exp3.txt', sep=',')
test<-read.table('~/Desktop/exp3.csv', sep=',', header=TRUE)
test<-read.table('~/Desktop/exp3.csv', sep=',')
test<-read.table('~/Desktop/exp3.csv', sep='\t')
install.packages('readxl')
library(readxl)
bank_df <- read_xlsx(path = "~/Desktop/exp3.xls")
library(readxl)
bank_df <- read_xlsx(path = "~/Desktop/exp3.xls")
bank_df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
bank_df
index<-which(bank_df$Ev=='CS' & bank_df$ent=='On')
index
length(index)
plot(bank_df$Time[index]/1000)
index<-which(bank_df$Ev=='CS' & bank_df$ent=='On' & bank_df$exp==0)
plot(bank_df$Time[index]/1000)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='CS' & bank_df$ent=='Off' & bank_df$exp==0)
polygon.end<-bank_df$Time[index]/1000
plot(c(0, 400), c(-1,1))
length(polygon.start)
length(polygon.end)
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0.25, 0.25), col='lightblue')
})
index<-which(bank_df$Ev=='US' & bank_df$ent=='On' & bank_df$exp==0)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='US' & bank_df$ent=='Off' & bank_df$exp==0)
polygon.end<-bank_df$Time[index]/1000
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0, 0), col='pink')
})
index<-which(bank_df$Ev=='CS' & bank_df$ent=='On' & bank_df$exp==1)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='CS' & bank_df$ent=='Off' & bank_df$exp==1)
polygon.end<-bank_df$Time[index]/1000
plot(c(0, 400), c(-1,1))
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0.25, 0.25), col='lightblue')
})
index<-which(bank_df$Ev=='US' & bank_df$ent=='On' & bank_df$exp==1)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='US' & bank_df$ent=='Off' & bank_df$exp==1)
polygon.end<-bank_df$Time[index]/1000
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0, 0), col='pink')
})
apply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0.25, 0.25), col='lightblue')
})
index<-which(bank_df$Ev=='US' & bank_df$ent=='On' & bank_df$exp==2)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='US' & bank_df$ent=='Off' & bank_df$exp=2)
bank_df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
exp<-2
index<-which(bank_df$Ev=='CS' & bank_df$ent=='On' & bank_df$exp==exp)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='CS' & bank_df$ent=='Off' & bank_df$exp==exp)
polygon.end<-bank_df$Time[index]/1000
plot(c(0, 400), c(-1,1))
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0.25, 0.25), col='lightblue')
})
index<-which(bank_df$Ev=='US' & bank_df$ent=='On' & bank_df$exp==exp)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='US' & bank_df$ent=='Off' & bank_df$exp=exp)
exp<-2
index<-which(bank_df$Ev=='CS' & bank_df$ent=='On' & bank_df$exp==exp)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='CS' & bank_df$ent=='Off' & bank_df$exp==exp)
polygon.end<-bank_df$Time[index]/1000
plot(c(0, 400), c(-1,1))
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0.25, 0.25), col='lightblue')
})
index<-which(bank_df$Ev=='US' & bank_df$ent=='On' & bank_df$exp==exp)
polygon.start<-bank_df$Time[index]/1000
index<-which(bank_df$Ev=='US' & bank_df$ent=='Off' & bank_df$exp==exp)
polygon.end<-bank_df$Time[index]/1000
lapply(seq_along(polygon.start), function(x){
polygon(c(polygon.start[x], polygon.end[x], polygon.end[x], polygon.start[x]),
c(-0.25, -0.25, 0, 0), col='pink')
})
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
plot(c(0, 400), c(-1,1))
plot(c(0, 400), c(-1,1), type='n')
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='')
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=NULL)
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
draw_polygon<-function(times, col='lightblue', height=c(-0.25, -0.25, 0.25, 0.25)){
lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
draw_polygon<-function(times, col='lightblue', height=c(-0.25, -0.25, 0.25, 0.25)){
lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
#' Visualize Protocol Data
#'
#' This function generates visualizations for the data frame containing protocol information.
#'
#' @param df A data frame containing protocol data.
#' @param exp which experiment to choose. Default is 0.
#' @param colCS color of the CS. Default is 'lightblue'.
#' @param colUS color of the US. Default is 'pink'.
#'
#' @details
#' This function takes a data frame 'df' as input and creates various visualizations
#' to help understand the protocol information.
#'
#' @examples
#' df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
#' viz_protocol(df)
#'
#' @keywords data visualization
#'
#' @export
viz_protocol <- function(df, exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times)
}
viz_protocol(bank_df)
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
draw_polygon<-function(times, col='lightblue', height=c(-0.25, -0.25, 0.25, 0.25)){
lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
#' Visualize Protocol Data
#'
#' This function generates visualizations for the data frame containing protocol information.
#'
#' @param df A data frame containing protocol data.
#' @param exp which experiment to choose. Default is 0.
#' @param colCS color of the CS. Default is 'lightblue'.
#' @param colUS color of the US. Default is 'pink'.
#'
#' @details
#' This function takes a data frame 'df' as input and creates various visualizations
#' to help understand the protocol information.
#'
#' @examples
#' df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
#' viz_protocol(df)
#'
#' @keywords data visualization
#'
#' @export
viz_protocol <- function(df, exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS)
}
viz_protocol(bank_df)
draw_polygon<-function(times, col='lightblue', height=c(-0.25, -0.25, 0.25, 0.25)){
out<-lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
draw_polygon<-function(times, col='lightblue', height=c(-0.25, -0.25, 0.25, 0.25)){
out<-lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
#' Visualize Protocol Data
#'
#' This function generates visualizations for the data frame containing protocol information.
#'
#' @param df A data frame containing protocol data.
#' @param exp which experiment to choose. Default is 0.
#' @param colCS color of the CS. Default is 'lightblue'.
#' @param colUS color of the US. Default is 'pink'.
#'
#' @details
#' This function takes a data frame 'df' as input and creates various visualizations
#' to help understand the protocol information.
#'
#' @examples
#' df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
#' viz_protocol(df)
#'
#' @keywords data visualization
#'
#' @export
viz_protocol <- function(df, exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS)
}
viz_protocol(bank_df)
?arrows
head(bank_df)
viz_protocol <- function(df, exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS)
arrows(min(df$Time)/1000, -0.25, x1 = max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df)
viz_protocol <- function(df, exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS)
arrows(min(df$Time)/1000, -0.25, x1 = 1.1*max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df)
viz_protocol <- function(df, main='My experiment', exp = 0, colCS = 'lightblue', colUS = 'pink') {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE, main=main)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS)
arrows(min(df$Time)/1000, -0.25, x1 = 1.1*max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df)
viz_protocol <- function(df, main='My experiment', exp = 0, colCS = 'lightblue', colUS = 'pink', hCS = 0.25, hUS=0.125) {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE, main=main)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS, height=hCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS, height=hUS)
arrows(min(df$Time)/1000, -0.25, x1 = 1.1*max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df)
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
draw_polygon<-function(times, col='lightblue', height=0.25){
height=c(-0.25, -0.25, height, height)
out<-lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
c(-0.25, -0.25, 0.25, 0.25), col=col)
})
}
#' Visualize Protocol Data
#'
#' This function generates visualizations for the data frame containing protocol information.
#'
#' @param df A data frame containing protocol data.
#' @param exp which experiment to choose. Default is 0.
#' @param colCS color of the CS. Default is 'lightblue'.
#' @param colUS color of the US. Default is 'pink'.
#'
#' @details
#' This function takes a data frame 'df' as input and creates various visualizations
#' to help understand the protocol information.
#'
#' @examples
#' df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
#' viz_protocol(df)
#'
#' @keywords data visualization
#'
#' @export
viz_protocol <- function(df, main='My experiment', exp = 0, colCS = 'lightblue', colUS = 'pink', hCS = 0.25, hUS=0.125) {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE, main=main)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS, height=hCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS, height=hUS)
arrows(min(df$Time)/1000, -0.25, x1 = 1.1*max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df)
viz_protocol(bank_df, main='Hej')
helper_function_viz_protocol<-function(df, exp, event = 'CS' ){
index<-which(df$Ev==event & df$ent=='On' & df$exp==exp)
polygon.start<-df$Time[index]/1000
index<-which(df$Ev==event & df$ent=='Off' & df$exp==exp)
polygon.end<-df$Time[index]/1000
times<-list(start = polygon.start,
end = polygon.end)
return(times)
}
draw_polygon<-function(times, col='lightblue', height=0.25){
height=c(-0.25, -0.25, height, height)
out<-lapply(seq_along(times$start), function(x){
polygon(c(times$start[x], times$end[x], times$end[x], times$start[x]),
height, col=col)
})
}
#' Visualize Protocol Data
#'
#' This function generates visualizations for the data frame containing protocol information.
#'
#' @param df A data frame containing protocol data.
#' @param exp which experiment to choose. Default is 0.
#' @param colCS color of the CS. Default is 'lightblue'.
#' @param colUS color of the US. Default is 'pink'.
#'
#' @details
#' This function takes a data frame 'df' as input and creates various visualizations
#' to help understand the protocol information.
#'
#' @examples
#' df <- read_xlsx(path = "~/Desktop/exp3.xlsx")
#' viz_protocol(df)
#'
#' @keywords data visualization
#'
#' @export
viz_protocol <- function(df, main='My experiment', exp = 0, colCS = 'lightblue', colUS = 'pink', hCS = 0.25, hUS=0.125) {
plot(c(0, 400), c(-1,1), type='n', ylab='', xlab='', axes=FALSE, main=main)
times <- helper_function_viz_protocol(df, exp, event = 'CS')
draw_polygon(times, col=colCS, height=hCS)
times <- helper_function_viz_protocol(df, exp, event = 'US')
draw_polygon(times, col=colUS, height=hUS)
arrows(min(df$Time)/1000, -0.25, x1 = 1.1*max(df$Time)/1000, y1 = -0.25, length = 0.25, angle = 30)
}
viz_protocol(bank_df, main='Hej')
viz_protocol(bank_df, main='Hej', hUS=0.05)
viz_protocol(bank_df, main='Hej', hUS=0.01)
devtools
install.packages('devtools')
devtools::document()
library(paramecium)
?viz_protocol
filename<-'~/Desktop//exp3.xlsx'
df<-read_xlsx(path = filename)
viz_protocol(bank_df, main='My experiment', hUS=0.01)
devtools::document()
library(paramecium)
